openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /api/songs/{id}:
    get:
      tags:
      - song-controller
      operationId: getSongById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Song"
    put:
      tags:
      - song-controller
      operationId: updateSong
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Song"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Song"
    delete:
      tags:
      - song-controller
      operationId: deleteSong
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /api/playlists/{id}:
    get:
      tags:
      - playlist-controller
      operationId: getPlaylistById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Playlist"
    put:
      tags:
      - playlist-controller
      operationId: updatePlaylist
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Playlist"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Playlist"
    delete:
      tags:
      - playlist-controller
      operationId: deletePlaylist
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
  /api/songs:
    get:
      tags:
      - song-controller
      operationId: getAllSongs
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Song"
    post:
      tags:
      - song-controller
      operationId: addSong
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Song"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Song"
    delete:
      tags:
      - song-controller
      operationId: deleteAllSongs
      responses:
        "200":
          description: OK
  /api/playlists:
    get:
      tags:
      - playlist-controller
      operationId: getAllPlaylists
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Playlist"
    post:
      tags:
      - playlist-controller
      operationId: addPlaylist
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Playlist"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Playlist"
    delete:
      tags:
      - playlist-controller
      operationId: deleteAllPlaylists
      responses:
        "200":
          description: OK
  /api/playlists/exists/{id}:
    get:
      tags:
      - playlist-controller
      operationId: exists
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: boolean
  /api/playlists/count:
    get:
      tags:
      - playlist-controller
      operationId: count
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: integer
                format: int64
components:
  schemas:
    Playlist:
      type: object
      properties:
        id:
          type: integer
          format: int32
        song:
          type: string
        playlistname:
          type: string
          maxLength: 50
          minLength: 0
        erstelldatum:
          type: string
          format: date
        songs:
          type: array
          items:
            $ref: "#/components/schemas/Song"
      required:
      - playlistname
    Song:
      type: object
      properties:
        id:
          type: string
        song:
          type: string
          pattern: "^[A-Za-z\\s]+$"
        titel:
          type: string
        kuenstler:
          type: string
          minLength: 1
        album:
          type: string
          minLength: 1
        veroeffentlichungsdatum:
          type: string
          format: date
        laenge:
          type: integer
          format: int32
          minimum: 30
        genre:
          type: string
        beliebtheit:
          type: string
          pattern: hoch|mittel|niedrig
        playlist:
          $ref: "#/components/schemas/Playlist"
      required:
      - album
      - kuenstler
      - veroeffentlichungsdatum
